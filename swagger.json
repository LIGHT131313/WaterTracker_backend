{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.5",
    "title": "WaterTracker Backend",
    "description": "<a href=\"${BASE_URL}\"><img src=\"https://yanlozovskyi.github.io/water-tracker/assets/Logo-890d13ba.png\" alt=\"Logo\"></a>\n\nWaterTracker Project Backend Development Completion Overview\n---\n\n### Introduction\n\nThe backend of the WaterTracker project has been successfully developed, embodying a fusion of modern web development practices and robust server-side technology. This comprehensive backend serves as the core of the application, skillfully managing data, user interactions, and seamless communication with the frontend. Below is an overview of the accomplished components and functionalities.\n\n### Completed Backend Components and Functionalities\n\n1. **Development Server Deployment Completed**\n- **Environment Set Up**: A development environment mirroring production settings has been established and optimized for peak performance, including advanced load balancing and memory management techniques.\n2. **Module Integration Finalized**\n- **Essential and Custom Modules**: Key backend modules for database interaction, authentication, and logging have been integrated. Custom modules tailored for specific application needs have also been developed, enhancing the backend's efficiency.\n3. **CORS Configuration Implemented**\n- **Secure and Flexible Data Exchange**: Strict CORS policies have been put in place, managing resource sharing between different origins and ensuring secure data exchange. Configurable settings allow varied access levels for different domains.\n4. **Advanced Error Handling System**\n- **Error Logging and Management**: A sophisticated logging system to record exceptions and errors has been implemented, facilitating easier debugging. User-friendly error responses have been designed for better user experience.\n5. **Database Connectivity and Optimization**\n- **Structured Database and Connection Management**: The database schema has been optimized for the application's data needs. Connection pooling has been implemented to enhance performance and reliability in database interactions.\n6. **RESTful API Development**\n- **Intuitive and Versioned APIs**: RESTful API endpoints have been crafted and are easily integrable. API versioning has been introduced for smooth transitions in future updates.\n7. **User Authentication and Authorization System**\n- **Secure Authentication and RBAC**: A secure user authentication flow using token-based systems like JWT has been established. Role-Based Access Control (RBAC) has been implemented to enforce access policies based on user roles.\n8. **Performance Optimization Achieved**\n- **Optimized Queries and Caching**: SQL queries have been optimized for faster response times. Caching mechanisms like Redis have been utilized for frequently accessed data, significantly improving performance.\n9. **Enhanced Security Measures**\n- **Proactive Vulnerability Mitigation and Encryption**: Regular updates and audits have been conducted to mitigate vulnerabilities. Encryption practices have been employed to protect sensitive data, both in transit and at rest.\n10. **Testing and Comprehensive Documentation**\n- **Automated Testing Suite**: A suite of automated tests (unit, integration, end-to-end) has been implemented to ensure backend robustness.\n- **Up-to-Date API Documentation**: Comprehensive API documentation has been created, providing easy reference for future development and usage.\n### Conclusion\nThe completion of the WaterTracker project's backend marks a significant milestone in the application's development journey. It stands as a testament to state-of-the-art backend engineering, prioritizing security, performance, and scalability. The backend is not only fully functional but also primed for future enhancements and expansions to meet evolving user needs.\n\n### Backend Team:\n- Serhii Kozhanov [GitHub](https://github.com/LIGHT131313) [LinkedIn](https://www.linkedin.com/in/serhii-kozhanov/) [Email](mailto:131313light@gmail.com)\n- Volodymyr Fetisov [GitHub](https://github.com/Fetivol) [LinkedIn](https://www.linkedin.com/in/volodymyr-fetisov-7aa069173) [Email](mailto:Fetisowova@gmail.com)\n- Stanislav Boychuk [GitHub](https://github.com/Fasten-belts) [LinkedIn](https://www.linkedin.com/in/stanislav-boychuk) [Email](mailto:boychukstanislav@gmail.com)\n\n---",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://watertracker-backend.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    },
    {
      "name": "Waterrate",
      "description": "Waterrate endpoints"
    },
    {
      "name": "Water",
      "description": "Water endpoints"
    },
    {
      "name": "Today",
      "description": "Today endpoints"
    },
    {
      "name": "Month",
      "description": "Month endpoints"
    }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registration user",
        "operationId": "authController.register",
        "parameters": [],
        "requestBody": {
          "description": "**email** - string, *required*\n\n**password** - string, *required*",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New User Registered\n\n**token** - string\n\n**email** - string\n\n**gender** - string\n\n**avatarURL** - string\n\n**waterRate** - integer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "409": {
            "description": "Email in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorConflictResponse"
                },
                "example": {
                  "message": "User with email - user@example.com, already exist"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "operationId": "authController.login",
        "parameters": [],
        "requestBody": {
          "description": "**email** - string, *required*\n\n**password** - string, *required*\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User login successfully\n\n**token** - string\n\n**email** - string\n\n**gender** - string\n\n**avatarURL** - string\n\n**waterRate** - integer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                },
                "example": {
                  "message": "Email or password is wrong"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/request-pass": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Send password recovery request",
        "operationId": "authController.requestPasswordReset",
        "parameters": [],
        "requestBody": {
          "description": "**email** - string, *required*\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password reset link sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PassResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "404": {
            "description": "User with this email not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                },
                "example": {
                  "message": "User not found"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/reset-pass": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Change password after email request",
        "operationId": "authController.resetPassword",
        "parameters": [],
        "requestBody": {
          "description": "**resetToken** - string, *required*\n\n**newPassword** - string, *required*          \n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPassResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body or Invalid/expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "description": "",
        "operationId": "authController.logout",
        "parameters": [],
        "responses": {
          "204": {
            "description": "User logout successfully"
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/user/avatar": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add/change user avatar",
        "operationId": "userController.avatar",
        "parameters": [],
        "requestBody": {
          "description": "**avatar** - string($binary), image file,  *required*.\n",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AvatarRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully adding an avatar\n\n**avatarURL** - string",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file in request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                },
                "example": {
                  "message": "Invalide file extention"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected field"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/user/current": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get current user information",
        "operationId": "userController.getCurrent",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Getting current user information successfully\n\n**name** - string\n\n**email** - string\n\n**gender** - string\n\n**avatarURL** - string\n\n**waterRate** - integer\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/user/edit": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Change user information",
        "operationId": "userController.updateUserInfo",
        "parameters": [],
        "requestBody": {
          "description": "Сan use one parameter *(except newPassword)*\n\n**email** - string\n\n**name** - string\n\n**gender** - string\n\n**outdatedPassword** - string, *required if added newPassword*\n\n**newPassword** - string\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User information updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed or Current password is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Current password is incorrect"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/waterrate": {
      "patch": {
        "tags": [
          "Waterrate"
        ],
        "summary": "Change user waterrate",
        "operationId": "waterRateController.updateWaterRate",
        "parameters": [],
        "requestBody": {
          "description": "**waterRate** - integer, *required*\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaterRate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "WaterRate updated succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterRate"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/water": {
      "post": {
        "tags": [
          "Water"
        ],
        "summary": "Add water value",
        "operationId": "waterController.addWaterValue",
        "parameters": [],
        "requestBody": {
          "description": "**waterVolume** - integer, *required*\n\n**date** - string, *required*\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaterAddRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Water volume added succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterAddResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          },
          "409": {
            "description": "Water Volume in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorConflictResponse"
                },
                "example": {
                  "message": "WaterVolume with this date 2023-11-15T14:20Z already exists in DB"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/water/{id}": {
      "patch": {
        "tags": [
          "Water"
        ],
        "summary": "Update water value",
        "operationId": "waterController.updateWaterValueByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "description": "ID of water value to use"
          }
        ],
        "requestBody": {
          "description": "Сan use one parameter\n\n**waterVolume** - integer\n\n**date** - string\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaterAddRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Water volume changed succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterAddResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          },
          "409": {
            "description": "Water Volume in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorConflictResponse"
                },
                "example": {
                  "message": "WaterVolume with this date 2023-11-15T14:20Z already exists in DB"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Water"
        ],
        "summary": "Delete water value",
        "operationId": "waterController.deleteteWaterValueByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "description": "ID of water value to use"
          }
        ],
        "responses": {
          "200": {
            "description": "Water volume deleted succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterVolumeDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          },
          "404": {
            "description": "Water Volume not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                },
                "example": {
                  "message": "Water Volume with id=658d7a999b99d9b51ae2097d not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/today": {
      "get": {
        "tags": [
          "Today"
        ],
        "summary": "Get today water values",
        "operationId": "todayControllers.getDayliStatistic",
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/DateRequest"
            },
            "description": "Date query water values. *Example 2023-11-15*"
          }
        ],
        "responses": {
          "200": {
            "description": "Getting today water values successfully\n\n**waterVolumeSum** - integer\n\n**waterVolume** - integer\n  \n**date** - string\n\n**owner** - string\n\n**_id** - string\n\n**waterVolumePercentage** - integer            \n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadQueryRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          },
          "404": {
            "description": "No water values for this date",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                },
                "example": {
                  "message": "Data for this Date: 2023-11-14 not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/month": {
      "get": {
        "tags": [
          "Month"
        ],
        "summary": "Get period water values",
        "operationId": "monthlyControllers.getMonthlyStatistic",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/DateRequest"
            },
            "description": "Start date query water values. *Example 2023-11-15*"
          },
          {
            "in": "query",
            "name": "endDate",
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/DateRequest"
            },
            "description": "End date query water values. *Example 2023-11-16*"
          }
        ],
        "responses": {
          "200": {
            "description": "Getting period water values successfully\n\n**waterVolumeSum** - integer\n\n**drinkCount** - integer\n\n**date** - string\n\n**waterVolumePercentage** - integer            \n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadQueryRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          },
          "404": {
            "description": "No water values for this period",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                },
                "example": {
                  "message": "Data for this period: 2023-10-10 - 2023-10-30 not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationLoginRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com",
            "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "qwerty123",
            "minimum": 8,
            "maximum": 64
          }
        }
      },
      "PassRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com",
            "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$"
          }
        }
      },
      "PassResponse": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Password reset link has been sent to your email"
          }
        }
      },
      "ResetPassRequest": {
        "required": [
          "resetToken",
          "newPassword"
        ],
        "type": "object",
        "properties": {
          "resetToken": {
            "type": "string",
            "example": "VwVWRPpuYN-AEZy2NGPwh"
          },
          "newPassword": {
            "type": "string",
            "example": "qwerty1234",
            "minimum": 8,
            "maximum": 64,
            "format": "password"
          }
        }
      },
      "ResetPassResponse": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Password has been reset successfully"
          }
        }
      },
      "RegistrationLoginResponse": {
        "required": [
          "user",
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1ODZjOWRjMTlmOTcxMjY5OTMzODQ5MCIsImlhdCI6MTcwMzMzMzE4MiwiZXhwIjoxNzAzNDE1OTgyfQ._o8tF4gIcZpycR5jiu9s5-CQ4EhkwzMomatg6sA-4do"
          },
          "user": {
            "required": [
              "email",
              "gender",
              "avatarURL",
              "waterRate"
            ],
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "example": "user@example.com"
              },
              "gender": {
                "type": "string",
                "example": "female",
                "default": "female",
                "enum": [
                  "male",
                  "female"
                ]
              },
              "avatarURL": {
                "type": "string",
                "nullable": true,
                "example": "http://res.cloudinary.com/doj55bihz/image/upload/v1703335266/user_avatars/fwkykl5kcqmcoc5p3qkn.jpg",
                "default": null
              },
              "waterRate": {
                "type": "integer",
                "example": 1500,
                "default": 2000,
                "minimum": 0,
                "maximum": 15000
              }
            }
          }
        }
      },
      "AvatarRequest": {
        "required": [
          "avatar"
        ],
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "AvatarResponse": {
        "required": [
          "avatarURL"
        ],
        "type": "object",
        "properties": {
          "avatarURL": {
            "type": "string",
            "nullable": true,
            "example": "http://res.cloudinary.com/doj55bihz/image/upload/v1703335266/user_avatars/fwkykl5kcqmcoc5p3qkn.jpg",
            "default": null
          }
        }
      },
      "UserCurrentResponse": {
        "required": [
          "name",
          "email",
          "gender",
          "avatarURL",
          "waterRate"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "User",
            "default": "",
            "maximum": 32
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "gender": {
            "type": "string",
            "example": "female",
            "default": "female",
            "enum": [
              "male",
              "female"
            ]
          },
          "avatarURL": {
            "type": "string",
            "example": "http://res.cloudinary.com/doj55bihz/image/upload/v1703335266/user_avatars/fwkykl5kcqmcoc5p3qkn.jpg",
            "default": null
          },
          "waterRate": {
            "type": "integer",
            "example": 1500,
            "default": 2000,
            "minimum": 0,
            "maximum": 15000
          }
        }
      },
      "EditUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com",
            "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$"
          },
          "name": {
            "type": "string",
            "example": "User",
            "default": "",
            "maximum": 32
          },
          "gender": {
            "type": "string",
            "example": "female",
            "default": "female",
            "enum": [
              "male",
              "female"
            ]
          },
          "outdatedPassword": {
            "type": "string",
            "example": "qwerty123",
            "minimum": 8,
            "maximum": 64,
            "format": "password"
          },
          "newPassword": {
            "type": "string",
            "example": "qwerty1234",
            "minimum": 8,
            "maximum": 64,
            "format": "password"
          }
        }
      },
      "EditUserResponse": {
        "required": [
          "email",
          "name",
          "gender"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "example": "User",
            "maximum": 32
          },
          "gender": {
            "type": "string",
            "example": "female",
            "default": "female",
            "enum": [
              "male",
              "female"
            ]
          }
        }
      },
      "WaterRate": {
        "required": [
          "waterRate"
        ],
        "type": "object",
        "properties": {
          "waterRate": {
            "type": "integer",
            "example": 3000,
            "default": 2000,
            "minimum": 0,
            "maximum": 15000
          }
        }
      },
      "WaterAddRequest": {
        "required": [
          "waterVolume",
          "date"
        ],
        "type": "object",
        "properties": {
          "waterVolume": {
            "type": "integer",
            "example": 300,
            "minimum": 0,
            "maximum": 5000
          },
          "date": {
            "type": "string",
            "example": "2023-11-15T14:20Z",
            "format": "date-time"
          }
        }
      },
      "WaterAddResponse": {
        "required": [
          "waterVolume",
          "date"
        ],
        "type": "object",
        "properties": {
          "waterVolume": {
            "type": "integer",
            "example": 300,
            "minimum": 0,
            "maximum": 5000
          },
          "date": {
            "type": "string",
            "example": "2023-11-15T14:20:00.000Z"
          },
          "owner": {
            "type": "string",
            "example": "658d62da31fc76aa332c7d85"
          },
          "_id": {
            "type": "string",
            "example": "658d6e74ca8f4105720b28f9"
          }
        }
      },
      "WaterVolumeDeleteResponse": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Water Volume deleted"
          }
        }
      },
      "DateRequest": {
        "type": "string",
        "format": "date",
        "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
        "example": "2023-11-15"
      },
      "TodayResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "waterVolumeSum",
            "waterVolumes",
            "waterVolumePercentage"
          ],
          "properties": {
            "waterVolumeSum": {
              "type": "integer",
              "example": 300,
              "default": 0
            },
            "waterVolumes": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WaterAddResponse"
              }
            },
            "waterVolumePercentage": {
              "type": "integer",
              "example": 53.33333,
              "default": 0
            }
          }
        }
      },
      "MonthResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "waterVolumeSum",
            "drinkCount",
            "date",
            "waterVolumePercentage"
          ],
          "properties": {
            "waterVolumeSum": {
              "type": "integer",
              "example": 300,
              "default": 0
            },
            "drinkCount": {
              "type": "integer",
              "example": 1,
              "default": 0
            },
            "date": {
              "type": "string",
              "example": "2023-11-15T00:00:00.000Z"
            },
            "waterVolumePercentage": {
              "type": "integer",
              "example": 15,
              "default": 0
            }
          }
        }
      },
      "errorBadRequesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Body must have fields"
          }
        }
      },
      "errorBadQueryRequesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Query must have fields"
          }
        }
      },
      "errorConflictResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": 409
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "errorUnauthorizedResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": 401
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Not authorized"
          }
        }
      },
      "errorNotFoundResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "inline_response_401": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Description of the error."
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}