{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.7",
    "title": "WaterTracker Backend",
    "description": "<img src=\"https://res.cloudinary.com/doj55bihz/image/upload/c_pad,b_auto:predominant,fl_preserve_transparency/v1704651372/img/Logo-890d13ba_to7trg.jpg?_s=public-apps\" alt=\"Logo\">\n\nNode.js server for the [WaterTracker](https://water-tracker-app.netlify.app) || [GitHub](https://github.com/YanLozovskyi/water-tracker)\n\nWaterTracker is a application that allows the user to monitor their daily water consumption.\n\n## Features\n- User registration and loginization by using password or Google Auth\n- Password recovery through email confirmation request\n- User authorization and logout\n- Editting user data (avatar, name, email, password)\n- Deleting a user account and his water values\n- Changing the calculation of the daily rate of water consumption\n- Adding, update, delete a record of consumed water\n- Calculation of the amount of water for the current day or the selected month\n\n## Technologies and packages Used\n\n- Node.js\n- Express.js\n- MongoDB\n- Mongoose\n- JWT (JSON Web Tokens)\n- Bcrypt\n- Dotenv\n- CORS\n- Nodemon\n- Axios\n- Cloudinary\n- Cross-env\n- Joi\n- Morgan\n- Multer\n- Nanoid\n- Nodemailer\n- Query-string\n- Swagger-ui-express\n\n## Contributors\n\n- Serhii Kozhanov [GitHub](https://github.com/LIGHT131313) || [LinkedIn](https://www.linkedin.com/in/serhii-kozhanov/)\n- Volodymyr Fetisov [GitHub](https://github.com/Fetivol) || [LinkedIn](https://www.linkedin.com/in/volodymyr-fetisov-7aa069173)\n- Stanislav Boychuk [GitHub](https://github.com/Fasten-belts) || [LinkedIn](https://www.linkedin.com/in/stanislav-boychuk)\n\n---",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://watertracker-backend.onrender.com"
    },
    {
      "url": "http://localhost:4000",
      "description": "Local server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    },
    {
      "name": "Waterrate",
      "description": "Waterrate endpoints"
    },
    {
      "name": "Water",
      "description": "Water endpoints"
    },
    {
      "name": "Today",
      "description": "Today endpoints"
    },
    {
      "name": "Month",
      "description": "Month endpoints"
    }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registration user",
        "operationId": "authController.register",
        "parameters": [],
        "requestBody": {
          "description": "**email** - string, *required*\n\n**password** - string, *required*",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New User Registered\n\n**token** - string\n\n**email** - string\n\n**gender** - string\n\n**avatarURL** - string\n\n**waterRate** - integer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "409": {
            "description": "Email in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorConflictResponse"
                },
                "example": {
                  "message": "User with email - user@example.com, already exist"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "operationId": "authController.login",
        "parameters": [],
        "requestBody": {
          "description": "**email** - string, *required*\n\n**password** - string, *required*\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User login successfully\n\n**token** - string\n\n**email** - string\n\n**gender** - string\n\n**avatarURL** - string\n\n**waterRate** - integer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                },
                "example": {
                  "message": "Email or password is wrong"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/request-pass": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Send password recovery request",
        "operationId": "authController.requestPasswordReset",
        "parameters": [],
        "requestBody": {
          "description": "**email** - string, *required*\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password reset link sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PassResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "404": {
            "description": "User with this email not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                },
                "example": {
                  "message": "User not found"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/reset-pass": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Change password after email request",
        "operationId": "authController.resetPassword",
        "parameters": [],
        "requestBody": {
          "description": "**resetToken** - string, *required*\n\n**newPassword** - string, *required*          \n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPassResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body or Invalid/expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "description": "",
        "operationId": "authController.logout",
        "parameters": [],
        "responses": {
          "204": {
            "description": "User logout successfully"
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "GoogleAuth": []
          }
        ]
      }
    },
    "/api/user/avatar": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Add/change user avatar",
        "operationId": "userController.avatar",
        "parameters": [],
        "requestBody": {
          "description": "**avatar** - string($binary), image file,  *required*.\n",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AvatarRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully adding an avatar\n\n**avatarURL** - string",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file in request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                },
                "example": {
                  "message": "Invalide file extention"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected field"
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "GoogleAuth": []
          }
        ]
      }
    },
    "/api/user/current": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get current user information",
        "operationId": "userController.getCurrent",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Getting current user information successfully\n\n**name** - string\n\n**email** - string\n\n**gender** - string\n\n**avatarURL** - string\n\n**waterRate** - integer\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "GoogleAuth": []
          }
        ]
      }
    },
    "/api/user/edit": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Change user information",
        "operationId": "userController.updateUserInfo",
        "parameters": [],
        "requestBody": {
          "description": "Сan use one parameter *(except newPassword)*\n\n**email** - string\n\n**name** - string\n\n**gender** - string\n\n**outdatedPassword** - string, *required if added newPassword*\n\n**newPassword** - string\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User information updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed or Current password is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Current password is incorrect"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "GoogleAuth": []
          }
        ]
      }
    },
    "/api/user/delete-account": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete user account",
        "operationId": "userController.deleteUserAndData",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User deleted succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDeleteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "GoogleAuth": []
          }
        ]
      }
    },
    "/api/waterrate": {
      "patch": {
        "tags": [
          "Waterrate"
        ],
        "summary": "Change user waterrate",
        "operationId": "waterRateController.updateWaterRate",
        "parameters": [],
        "requestBody": {
          "description": "**waterRate** - integer, *required*\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaterRate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "WaterRate updated succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterRate"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "GoogleAuth": []
          }
        ]
      }
    },
    "/api/water": {
      "post": {
        "tags": [
          "Water"
        ],
        "summary": "Add water value",
        "operationId": "waterController.addWaterValue",
        "parameters": [],
        "requestBody": {
          "description": "**waterVolume** - integer, *required*\n\n**date** - string, *required*\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaterAddRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Water volume added succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterAddResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          },
          "409": {
            "description": "Water Volume in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorConflictResponse"
                },
                "example": {
                  "message": "WaterVolume with this date 2024-01-10T00:05:50.032Z already exists in DB"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "GoogleAuth": []
          }
        ]
      }
    },
    "/api/water/{id}": {
      "patch": {
        "tags": [
          "Water"
        ],
        "summary": "Update water value",
        "operationId": "waterController.updateWaterValueByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "description": "ID of water value to use"
          }
        ],
        "requestBody": {
          "description": "Сan use one parameter\n\n**waterVolume** - integer\n\n**date** - string\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaterAddRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Water volume changed succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterAddResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          },
          "404": {
            "description": "Water Volume with this id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                },
                "example": {
                  "message": "WaterVolume not found"
                }
              }
            }
          },
          "409": {
            "description": "Water Volume in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorConflictResponse"
                },
                "example": {
                  "message": "WaterVolume with this date 2024-01-10T00:05:50.032Z already exists in DB"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "GoogleAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Water"
        ],
        "summary": "Delete water value",
        "operationId": "waterController.deleteteWaterValueByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "description": "ID of water value to use"
          }
        ],
        "responses": {
          "200": {
            "description": "Water volume deleted succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterVolumeDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          },
          "404": {
            "description": "Water Volume not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                },
                "example": {
                  "message": "Water Volume with id=658d7a999b99d9b51ae2097d not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "GoogleAuth": []
          }
        ]
      }
    },
    "/api/today": {
      "get": {
        "tags": [
          "Today"
        ],
        "summary": "Get today water values",
        "operationId": "todayControllers.getDayliStatistic",
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/DateRequest"
            },
            "description": "Date query water values. *Example 2024-01-10*"
          }
        ],
        "responses": {
          "200": {
            "description": "Getting today water values successfully\n\n**waterVolumeSum** - integer\n\n**waterVolume** - integer\n  \n**date** - string\n\n**owner** - string\n\n**_id** - string\n\n**waterVolumePercentage** - integer            \n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadQueryRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "GoogleAuth": []
          }
        ]
      }
    },
    "/api/month": {
      "get": {
        "tags": [
          "Month"
        ],
        "summary": "Get period water values",
        "operationId": "monthlyControllers.getMonthlyStatistic",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/DateRequest"
            },
            "description": "Start date query water values. *Example 2024-01-10*"
          },
          {
            "in": "query",
            "name": "endDate",
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/DateRequest"
            },
            "description": "End date query water values. *Example 2024-01-11*"
          }
        ],
        "responses": {
          "200": {
            "description": "Getting period water values successfully\n\n**waterVolumeSum** - integer\n\n**drinkCount** - integer\n\n**date** - string\n\n**waterVolumePercentage** - integer            \n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadQueryRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          },
          {
            "GoogleAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationLoginRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com",
            "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "qwerty123",
            "minimum": 8,
            "maximum": 64
          }
        }
      },
      "PassRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com",
            "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$"
          }
        }
      },
      "PassResponse": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Password reset link has been sent to your email"
          }
        }
      },
      "ResetPassRequest": {
        "required": [
          "resetToken",
          "newPassword"
        ],
        "type": "object",
        "properties": {
          "resetToken": {
            "type": "string",
            "example": "VwVWRPpuYN-AEZy2NGPwh"
          },
          "newPassword": {
            "type": "string",
            "example": "qwerty1234",
            "minimum": 8,
            "maximum": 64,
            "format": "password"
          }
        }
      },
      "ResetPassResponse": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Password has been reset successfully"
          }
        }
      },
      "RegistrationLoginResponse": {
        "required": [
          "user",
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1ODZjOWRjMTlmOTcxMjY5OTMzODQ5MCIsImlhdCI6MTcwMzMzMzE4MiwiZXhwIjoxNzAzNDE1OTgyfQ._o8tF4gIcZpycR5jiu9s5-CQ4EhkwzMomatg6sA-4do"
          },
          "user": {
            "required": [
              "email",
              "gender",
              "avatarURL",
              "waterRate"
            ],
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "example": "user@example.com"
              },
              "gender": {
                "type": "string",
                "example": "female",
                "default": "female",
                "enum": [
                  "male",
                  "female"
                ]
              },
              "avatarURL": {
                "type": "string",
                "nullable": true,
                "example": "http://res.cloudinary.com/doj55bihz/image/upload/v1703335266/user_avatars/fwkykl5kcqmcoc5p3qkn.jpg",
                "default": null
              },
              "waterRate": {
                "type": "integer",
                "example": 1500,
                "default": 2000,
                "minimum": 0,
                "maximum": 15000
              }
            }
          }
        }
      },
      "AvatarRequest": {
        "required": [
          "avatar"
        ],
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "AvatarResponse": {
        "required": [
          "avatarURL"
        ],
        "type": "object",
        "properties": {
          "avatarURL": {
            "type": "string",
            "nullable": true,
            "example": "http://res.cloudinary.com/doj55bihz/image/upload/v1703335266/user_avatars/fwkykl5kcqmcoc5p3qkn.jpg",
            "default": null
          }
        }
      },
      "UserCurrentResponse": {
        "required": [
          "name",
          "email",
          "gender",
          "avatarURL",
          "waterRate"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "User",
            "default": "",
            "maximum": 32
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "gender": {
            "type": "string",
            "example": "female",
            "default": "female",
            "enum": [
              "male",
              "female"
            ]
          },
          "avatarURL": {
            "type": "string",
            "example": "http://res.cloudinary.com/doj55bihz/image/upload/v1703335266/user_avatars/fwkykl5kcqmcoc5p3qkn.jpg",
            "default": null
          },
          "waterRate": {
            "type": "integer",
            "example": 1500,
            "default": 2000,
            "minimum": 0,
            "maximum": 15000
          }
        }
      },
      "EditUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com",
            "pattern": "^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$"
          },
          "name": {
            "type": "string",
            "example": "User",
            "default": "",
            "maximum": 32
          },
          "gender": {
            "type": "string",
            "example": "female",
            "default": "female",
            "enum": [
              "male",
              "female"
            ]
          },
          "outdatedPassword": {
            "type": "string",
            "example": "qwerty123",
            "minimum": 8,
            "maximum": 64,
            "format": "password"
          },
          "newPassword": {
            "type": "string",
            "example": "qwerty1234",
            "minimum": 8,
            "maximum": 64,
            "format": "password"
          }
        }
      },
      "EditUserResponse": {
        "required": [
          "email",
          "name",
          "gender"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "example": "User",
            "maximum": 32
          },
          "gender": {
            "type": "string",
            "example": "female",
            "default": "female",
            "enum": [
              "male",
              "female"
            ]
          }
        }
      },
      "UserDeleteResponse": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User and all related data have been successfully deleted."
          }
        }
      },
      "WaterRate": {
        "required": [
          "waterRate"
        ],
        "type": "object",
        "properties": {
          "waterRate": {
            "type": "integer",
            "example": 3000,
            "default": 2000,
            "minimum": 0,
            "maximum": 15000
          }
        }
      },
      "WaterAddRequest": {
        "required": [
          "waterVolume",
          "date"
        ],
        "type": "object",
        "properties": {
          "waterVolume": {
            "type": "integer",
            "example": 300,
            "minimum": 0,
            "maximum": 5000
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$",
            "example": "2024-01-10T00:05:50.032Z"
          }
        }
      },
      "WaterAddResponse": {
        "required": [
          "waterVolume",
          "date"
        ],
        "type": "object",
        "properties": {
          "waterVolume": {
            "type": "integer",
            "example": 300,
            "minimum": 0,
            "maximum": 5000
          },
          "date": {
            "type": "string",
            "example": "2023-11-15T14:20:00.000Z"
          },
          "owner": {
            "type": "string",
            "example": "658d62da31fc76aa332c7d85"
          },
          "_id": {
            "type": "string",
            "example": "658d6e74ca8f4105720b28f9"
          }
        }
      },
      "WaterVolumeDeleteResponse": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Water Volume deleted"
          }
        }
      },
      "DateRequest": {
        "type": "string",
        "format": "date",
        "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
        "example": "2024-01-10"
      },
      "TodayResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "waterVolumeSum",
            "waterVolumes",
            "waterVolumePercentage"
          ],
          "properties": {
            "waterVolumeSum": {
              "type": "integer",
              "example": 300,
              "default": 0
            },
            "waterVolumes": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WaterAddResponse"
              }
            },
            "waterVolumePercentage": {
              "type": "integer",
              "example": 53.33333,
              "default": 0
            }
          }
        }
      },
      "MonthResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "waterVolumeSum",
            "drinkCount",
            "date",
            "waterVolumePercentage"
          ],
          "properties": {
            "waterVolumeSum": {
              "type": "integer",
              "example": 300,
              "default": 0
            },
            "drinkCount": {
              "type": "integer",
              "example": 1,
              "default": 0
            },
            "date": {
              "type": "string",
              "example": "2023-11-15T00:00:00.000Z"
            },
            "waterVolumePercentage": {
              "type": "integer",
              "example": 15,
              "default": 0
            }
          }
        }
      },
      "errorBadRequesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Body must have fields"
          }
        }
      },
      "errorBadQueryRequesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Query must have fields"
          }
        }
      },
      "errorConflictResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": 409
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "errorUnauthorizedResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": 401
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Not authorized"
          }
        }
      },
      "errorNotFoundResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "inline_response_401": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Description of the error."
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "GoogleAuth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://watertracker-backend.onrender.com/api/auth/google"
          }
        }
      }
    }
  }
}