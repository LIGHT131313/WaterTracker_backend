{
  "openapi": "3.0.3",
  "info": {
    "version": "1.0.2",
    "title": "WaterTracker Backend",
    "description": "API documentation for project WaterTracker",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://watertracker-backend.onrender.com"
    },
    {
      "url": "http://localhost:4000"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    },
    {
      "name": "Waterrate",
      "description": "Waterrate endpoints"
    },
    {
      "name": "Water",
      "description": "Water endpoints"
    },
    {
      "name": "Today",
      "description": "Today endpoints"
    },
    {
      "name": "Month",
      "description": "Month endpoints"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registration user",
        "operationId": "authController.register",
        "parameters": [],
        "requestBody": {
          "description": "**email** - string, *required*\n\n**password** - string, *required*",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New User Registered\n\n**token** - string\n\n**email** - string\n\n**gender** - string\n\n**avatarURL** - string\n\n**waterRate** - integer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "409": {
            "description": "Email in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorConflictResponse"
                },
                "example": {
                  "message": "User with email - user@example.com, already exist"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "operationId": "authController.login",
        "parameters": [],
        "requestBody": {
          "description": "**email** - string, *required*\n\n**password** - string, *required*\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User login successfully\n\n**token** - string\n\n**email** - string\n\n**gender** - string\n\n**avatarURL** - string\n\n**waterRate** - integer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationLoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                },
                "example": {
                  "message": "Email or password is wrong"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "description": "",
        "operationId": "authController.logout",
        "parameters": [],
        "responses": {
          "204": {
            "description": "User logout successfully"
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/avatar": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add/change user avatar",
        "operationId": "userController.avatar",
        "parameters": [],
        "requestBody": {
          "description": "**avatar** - string($binary), image file,  *required*.\n",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AvatarRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully adding an avatar\n\n**avatarURL** - string",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file in request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                },
                "example": {
                  "message": "Invalide file extention"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected field"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/current": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get current user information",
        "operationId": "userController.getCurrent",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Getting current user information successfully\n\n**name** - string\n\n**email** - string\n\n**gender** - string\n\n**avatarURL** - string\n\n**waterRate** - integer\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/edit": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Change user information",
        "operationId": "userController.updateUserInfo",
        "parameters": [],
        "requestBody": {
          "description": "Ð¡an use one parameter *(except newPassword)*\n\n**email** - string\n\n**name** - string\n\n**gender** - string\n\n**outdatedPassword** - string, *required if added newPassword*\n\n**newPassword** - string\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User information updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed or Current password is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Current password is incorrect"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/waterrate": {
      "post": {
        "tags": [
          "Waterrate"
        ],
        "summary": "Change user waterrate",
        "operationId": "waterRateController.updateWaterRate",
        "parameters": [],
        "requestBody": {
          "description": "**waterRate** - integer, *required*\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaterRateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "WaterRate updated succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterRateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/water": {
      "post": {
        "tags": [
          "Water"
        ],
        "summary": "Add water value",
        "operationId": "waterController.addWaterValue",
        "parameters": [],
        "requestBody": {
          "description": "**waterVolume** - integer, *required*\n\n**date** - string, *required*\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaterAddRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Water volume added succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterAddResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          },
          "409": {
            "description": "Water Volume in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorConflictResponse"
                },
                "example": {
                  "message": "WaterVolume with this date 2023-11-15T14:20Z already exists in DB"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/water/{id}": {
      "patch": {
        "tags": [
          "Water"
        ],
        "summary": "Update water value",
        "operationId": "waterController.updateWaterValueByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "description": "ID of water value to use"
          }
        ],
        "requestBody": {
          "description": "Ð¡an use one parameter\n\n**waterVolume** - integer\n\n**date** - string\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaterAddRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Water volume changed succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterAddResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          },
          "409": {
            "description": "Water Volume in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorConflictResponse"
                },
                "example": {
                  "message": "WaterVolume with this date 2023-11-15T14:20Z already exists in DB"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Water"
        ],
        "summary": "Delete water value",
        "operationId": "waterController.deleteteWaterValueByID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            },
            "description": "ID of water value to use"
          }
        ],
        "responses": {
          "200": {
            "description": "Water volume deleted succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterVolumeDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          },
          "404": {
            "description": "Water Volume not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                },
                "example": {
                  "message": "Water Volume with id=658d7a999b99d9b51ae2097d not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/today": {
      "post": {
        "tags": [
          "Today"
        ],
        "summary": "Get today water values",
        "operationId": "todayControllers.getDayliStatistic",
        "parameters": [],
        "requestBody": {
          "description": "**date** - string,  *required*.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TodayRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Getting today water values successfully\n\n**_id** - null\n\n**waterVolumeSum** - integer\n\n**waterVolumes** - array\n\n**waterVolumePercentage** - integer            \n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TodayResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Bearer auth failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                },
                "example": {
                  "message": "Not authorized"
                }
              }
            }
          },
          "404": {
            "description": "No water values for this date",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                },
                "example": {
                  "message": "Data for this Date: 2023-11-14 not found"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationLoginRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "example": "qwerty123",
            "minimum": 8,
            "maximum": 64
          }
        }
      },
      "RegistrationLoginResponse": {
        "required": [
          "user",
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1ODZjOWRjMTlmOTcxMjY5OTMzODQ5MCIsImlhdCI6MTcwMzMzMzE4MiwiZXhwIjoxNzAzNDE1OTgyfQ._o8tF4gIcZpycR5jiu9s5-CQ4EhkwzMomatg6sA-4do"
          },
          "user": {
            "required": [
              "email",
              "gender",
              "avatarURL",
              "waterRate"
            ],
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "example": "user@example.com"
              },
              "gender": {
                "type": "string",
                "example": "female",
                "default": "female",
                "enum": [
                  "male",
                  "female"
                ]
              },
              "avatarURL": {
                "type": "string",
                "example": "http://res.cloudinary.com/doj55bihz/image/upload/v1703335266/user_avatars/fwkykl5kcqmcoc5p3qkn.jpg",
                "default": null
              },
              "waterRate": {
                "type": "integer",
                "example": 1500,
                "default": 2000,
                "minimum": 0,
                "maximum": 15000
              }
            }
          }
        }
      },
      "AvatarRequest": {
        "required": [
          "avatar"
        ],
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "AvatarResponse": {
        "required": [
          "avatarURL"
        ],
        "type": "object",
        "properties": {
          "avatarURL": {
            "type": "string",
            "example": "http://res.cloudinary.com/doj55bihz/image/upload/v1703335266/user_avatars/fwkykl5kcqmcoc5p3qkn.jpg",
            "default": null
          }
        }
      },
      "UserCurrentResponse": {
        "required": [
          "name",
          "email",
          "gender",
          "avatarURL",
          "waterRate"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "User",
            "default": "",
            "maximum": 32
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "gender": {
            "type": "string",
            "example": "female",
            "default": "female",
            "enum": [
              "male",
              "female"
            ]
          },
          "avatarURL": {
            "type": "string",
            "example": "http://res.cloudinary.com/doj55bihz/image/upload/v1703335266/user_avatars/fwkykl5kcqmcoc5p3qkn.jpg",
            "default": null
          },
          "waterRate": {
            "type": "integer",
            "example": 1500,
            "default": 2000,
            "minimum": 0,
            "maximum": 15000
          }
        }
      },
      "EditUserRequest": {
        "required": [
          "outdatedPassword"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "example": "User",
            "default": "",
            "maximum": 32
          },
          "gender": {
            "type": "string",
            "example": "female",
            "default": "female",
            "enum": [
              "male",
              "female"
            ]
          },
          "outdatedPassword": {
            "type": "string",
            "example": "qwerty123",
            "minimum": 8,
            "maximum": 64
          },
          "newPassword": {
            "type": "string",
            "example": "qwerty1234",
            "minimum": 8,
            "maximum": 64
          }
        }
      },
      "EditUserResponse": {
        "required": [
          "email",
          "name",
          "gender"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "example": "User",
            "maximum": 32
          },
          "gender": {
            "type": "string",
            "example": "female",
            "default": "female",
            "enum": [
              "male",
              "female"
            ]
          }
        }
      },
      "WaterRateRequest": {
        "required": [
          "waterRate"
        ],
        "type": "object",
        "properties": {
          "waterRate": {
            "type": "integer",
            "example": 3000,
            "default": 2000,
            "minimum": 0,
            "maximum": 15000
          }
        }
      },
      "WaterRateResponse": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "WaterRate updated succesfully"
          }
        }
      },
      "WaterAddRequest": {
        "required": [
          "waterVolume",
          "date"
        ],
        "type": "object",
        "properties": {
          "waterVolume": {
            "type": "integer",
            "example": 300,
            "minimum": 0,
            "maximum": 5000
          },
          "date": {
            "type": "string",
            "example": "2023-11-15T14:20Z"
          }
        }
      },
      "WaterAddResponse": {
        "required": [
          "waterVolume",
          "date"
        ],
        "type": "object",
        "properties": {
          "waterVolume": {
            "type": "integer",
            "example": 300,
            "minimum": 0,
            "maximum": 5000
          },
          "date": {
            "type": "string",
            "example": "2023-11-15T14:20:00.000Z"
          },
          "owner": {
            "type": "string",
            "example": "658d62da31fc76aa332c7d85"
          },
          "_id": {
            "type": "string",
            "example": "658d6e74ca8f4105720b28f9"
          }
        }
      },
      "WaterVolumeDeleteResponse": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Water Volume deleted"
          }
        }
      },
      "TodayRequest": {
        "required": [
          "date"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "example": "2023-11-15"
          }
        }
      },
      "TodayResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "_id",
            "waterVolumeSum",
            "waterVolumes",
            "waterVolumePercentage"
          ],
          "properties": {
            "_id": {
              "type": "string",
              "default": null
            },
            "waterVolumeSum": {
              "type": "integer",
              "example": 300,
              "default": 0
            },
            "waterVolumes": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WaterAddResponse"
              }
            },
            "waterVolumePercentage": {
              "type": "integer",
              "example": 53.33333,
              "default": 0
            }
          }
        }
      },
      "errorBadRequesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Body must have fields"
          }
        }
      },
      "errorConflictResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": 409
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "errorUnauthorizedResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": 401
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Not authorized"
          }
        }
      },
      "errorNotFoundResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "inline_response_401": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Description of the error."
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}